-- DROP THE DATABASE TO KEEP THINGS CLEAN
DROP DATABASE IF EXISTS GARCON;

-- CREATE THE DATABASE
CREATE DATABASE IF NOT EXISTS GARCON;

-- HOLDS ALL OF THE NIFI CLUSTERS ACTIVELY ASSOCIATED WITH GARCON
CREATE TABLE IF NOT EXISTS GARCON.NIFI_CLUSTER(
    CLUSTER_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    CLUSTER_NAME VARCHAR(255) NOT NULL,
    CLUSTER_DESC VARCHAR(255),
    CLUSTER_HOSTNAME VARCHAR(255) NOT NULL,
    CLUSTER_PORT VARCHAR(6) NOT NULL
);

-- INSERT BASELINE CLUSTER DATA
INSERT INTO `GARCON`.`NIFI_CLUSTER` (`CLUSTER_ID`, `CLUSTER_NAME`, `CLUSTER_DESC`, `CLUSTER_HOSTNAME`, `CLUSTER_PORT`) VALUES ('1', 'WhiskeyCellar', 'Unbuntu local home network testing server', '192.168.1.75', '8080');
INSERT INTO `GARCON`.`NIFI_CLUSTER` (`CLUSTER_ID`, `CLUSTER_NAME`, `CLUSTER_DESC`, `CLUSTER_HOSTNAME`, `CLUSTER_PORT`) VALUES ('2', 'JDyer FieldCloud', 'Fieldcloud instance for testing', 'jdyer-garcon0.field.hortonworks.com', '8080');

-- HOLDS ALL OF THE NIFI NODES ASSOCIATED WITH ACTIVE NIFI CLUSTERS UNDER GARCON
CREATE TABLE IF NOT EXISTS GARCON.NIFI_NODE(
    NODE_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    NODE_URI VARCHAR(255) NOT NULL
);

-- HOLDS ALL THE MINIFI NODES (BOIH C++ AND JAVA BASED)
CREATE TABLE IF NOT EXISTS GARCON.MINIFI_NODE (
    NODE_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    INTERNAL_IP VARCHAR(25) NOT NULL,
    EXTERNAL_IP VARCHAR(25) NOT NULL,
    HOSTNAME VARCHAR(255) NOT NULL,
    NUM_PROCESSORS INT,
    DEVICE_NAME VARCHAR(255),
    DEVICE_TYPE VARCHAR(4)
);

-- INSERT BASELINE MINIFI DEVICES
INSERT INTO `GARCON`.`MINIFI_NODE` (`NODE_ID`, `INTERNAL_IP`, `EXTERNAL_IP`, `HOSTNAME`, `NUM_PROCESSORS`, `DEVICE_NAME`, `DEVICE_TYPE`) VALUE ('1', '192.168.1.75', '192.168.1.75', 'whiskeycellar', '4', 'WhiskeyCellar Ubuntu 16.04', 'c++');

-- HOLDS THE METRIC THRESHOLDS THAT DEFINE THE PROPERTIES THAT GARCON SHOULD BE MONITORING IN A SPECIFIC NIFI INSTANCE.
CREATE TABLE IF NOT EXISTS GARCON.METRIC_THRESHOLD (
    THRESHOLD_ID BIGINT AUTO_INCREMENT,
    CLUSTER_ID BIGINT,
    THRESHOLD_NAME VARCHAR(255) NOT NULL,
    THRESHOLD_DESC VARCHAR(255),
    COMPONENT_ID VARCHAR(255) NOT NULL,
    API_URI VARCHAR(255) NOT NULL,
    PRIMARY KEY (THRESHOLD_ID),
    FOREIGN KEY (CLUSTER_ID) REFERENCES GARCON.NIFI_CLUSTER (CLUSTER_ID)
);

-- INSERT SOME SAMPLE METRIC THRESHOLDS.
INSERT INTO `GARCON`.`METRIC_THRESHOLD` (`THRESHOLD_ID`, `CLUSTER_ID`, `THRESHOLD_NAME`, `THRESHOLD_DESC`, `COMPONENT_ID`, `API_URI`) VALUES ('1', '2', 'Connection Depth', 'Watch for connections with more than 10 flowfiles', 'root', '/nifi-api/process-groups/root/connections');

-- HOLDS THE THRESHOLD REACTIONS THAT WILL OCCUR BASED ON IF A METRICS THRESHOLD IS DETERMINED TO HAVE BEEN MET BY GARCON
CREATE TABLE IF NOT EXISTS GARCON.THRESHOLD_REACTION (
    REACTION_ID BIGINT AUTO_INCREMENT,
    METRIC_THRESHOLD_ID BIGINT,
    REACTION_NAME VARCHAR(255) NOT NULL,
    REACTION_DESC VARCHAR(255),
    REACTION_EVENT_CLASS VARCHAR(255) NOT NULL,
    PRIMARY KEY (REACTION_ID),
    FOREIGN KEY (METRIC_THRESHOLD_ID) REFERENCES GARCON.METRIC_THRESHOLD (THRESHOLD_ID)
);